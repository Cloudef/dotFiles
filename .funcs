#!/bin/bash
## INCLUDE FILE ##

# Useful shell functions
# Most of these aren't done by me, but collected from different places.

################
## Smarter CD ##
################
function goto() {
	[ -d "$1" ] && cd "$1" || cd "$(dirname "$1")";
}

####################
## Copy && Follow ##
####################
function cpf() {
	cp "$@" && goto "$_";
}

####################
## Move && Follow ##
####################
function mvf() {
	mv "$@" && goto "$_";
}

#####################
## mkdir && follow ##
#####################
function mkcdr() {
	mkdir -vp "$@" && cd "$_";
}

##########################
## VDPAU Test           ##
## CPU is better for me ##
##########################
function vplay() {
	mplayer-icon -vo vdpau -vc ffh264vdpau "$1"
}

##################
## Start daemon ##
##################
function start() {
	for arg in $@
	do
		sudo /etc/rc.d/$arg start
	done
}

#################
## Stop daemon ##
#################
function stop() {
	for arg in $@
	do
		sudo /etc/rc.d/$arg stop
	done
}

####################
## Restart daemon ##
####################
function restart() {
	for arg in $@
	do
		sudo /etc/rc.d/$arg restart
	done
}

###################
## Daemon status ##
###################
function status() {
	for	arg in $@
	do
		sudo /etc/rc.d/$arg status
	done
}


###################################################################
## PKG Build system                                              ##
##                                                               ##
## Create PKGBUILD folder in your $HOME                          ##
## For each project create own folder and put the PKGBUILD there ##
###################################################################
function pkg() {
	if [[ ! "$1" ]]; then
		echo "Usage : pkg [PKGBUILD]"
		return
	fi
	if [ ! -d "$HOME/PKGBUILD" ]; then
		echo "No PKGBUILD folder in Home"
		return
	fi
	if [ ! -d "$HOME/PKGBUILD/$1" ]; then
		echo "No PKG directory for $1"
		return
	fi
	if [ ! -f "$HOME/PKGBUILD/$1/PKGBUILD" ]; then
		echo "No PKGBUILD for $1"
		return
	fi
	pushd "$HOME/PKGBUILD/$1" >> /dev/null
	makepkg --clean --install
	popd >> /dev/null
}


###########################
## Quote from bashquotes ##
###########################
function quote() {
	curl -s "http://bash.org/?random1"|grep -oE "<p class=\"quote\">.*</p>.*</p>"|grep -oE "<p class=\"qt.*?</p>"|sed -e 's/<\/p>/\n/g' -e 's/<p class=\"qt\">//g' -e 's/<p class=\"qt\">//g'|perl -ne 'use HTML::Entities;print decode_entities($_),"\n"'|head -1
}

#################################
## CLIcandy from commandlinefu ##
#################################
function fu() {
   if [[ ! "$1" ]]; then
      echo "Usage: fu [query]"
      return
   fi
   curl -s "http://www.commandlinefu.com/commands/matching/$@/$(echo -n $@ | openssl base64)/plaintext" | grep -v "^# commandlinefu"
}

######################
## Extract archives ##
######################
function extract() {
	if [ -f "$1" ] ; then
		case "$1" in
			*.tar.bz2)   tar xvjf "$1"    ;;
			*.tar.gz)    tar xvzf "$1"    ;;
			*.bz2)       bunzip2 "$1"     ;;
			*.rar)       unrar x "$1"     ;;
			*.gz)        gunzip "$1"      ;;
			*.tar)       tar xvf "$1"     ;;
			*.tbz2)      tar xvjf "$1"    ;;
			*.tgz)       tar xvzf "$1"    ;;
			*.zip)       unzip "$1"       ;;
			*.Z)         uncompress "$1"  ;;
			*.7z)        7z x "$1"        ;;
			*)           echo "don't know how to extract '$1'..." ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

########################
## Create tar archive ##
########################
function mktar() {
	tar cvf  "${1%%/}.tar"     "${1%%/}/";
}

###########################
## Create tar.gz archive ##
###########################
function mktgz() {
	tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
}

############################
## Create tar.bz2 archive ##
############################
function mktbz() {
	tar cvjf "${1%%/}.tar.bz2" "${1%%/}/";
}

#################################################
## Simple encode for HD video                  ##
## If you are _encoder_ don't rely on these :) ##
#################################################
function videoencodehd()
{
   if [ ! -f "$1" || [[ ! "$1" ]]; then
      echo "'$1' is not a valid file"
      return
   fi
	ffmpeg -y -i $1 -threads 0 -acodec libfaac -ar 44100 -ab 96k -vcodec libx264 -vpre libx264-lossless_medium -level 41 -crf 20 -bufsize 24000k -maxrate 32000k -g 250 -r 20 -coder 1 -flags +loop -cmp +chroma -partitions +parti4x4+partp8x8+partb8x8 -flags2 +dct8x8+bpyramid -me_method umh -subq 7 -me_range 16 -keyint_min 25 -sc_threshold 40 -i_qfactor 0.71 -rc_eq 'blurCplx^(1-qComp)' -bf 16 -b_strategy 1 -bidir_refine 1 -refs 6 -deblockalpha 0 -deblockbeta 0 $2
}

################################
## Simple encode for SD video ##
################################
function videoencodesd()
{
   if [ ! -f "$1" ] || [[ ! "$1" ]]; then
      echo "'$1' is not a valid file"
      return
   fi
	ffmpeg -i "$1" -vcodec libx264 -vpre fast -crf 22 -threads 0 $2
}

################
## FLV >> MKV ##
################
function flv2mkv() {
   if [ ! -f "$1" ] || [[ ! "$1" ]]; then
      echo "'$1' is not a valid file"
      return
   fi
   ffmpeg -i "$1" -vcodec copy -sameq -acodec copy -f matroska ${1%.*}.mkv
}

################
## FLV >> MP3 ##
################
function flv2mp3() {
   if [ ! -f "$1" ] || [[ ! "$1" ]]; then
      echo "'$1' is not a valid file"
      return
   fi
   ffmpeg -i "$1" -ab 320 -ar 44100 ${1%.*}.mp3
}

################
## MID >> OGG ##
################
function mid2ogg()
{
   if [ ! -f "$1" ] || [[ ! "$1" ]]; then
      echo "'$1' is not a valid file"
      return
   fi
	timidity -Ov "$1"
}

################
## MID >> WAV ##
################
function mid2wav()
{
   if [ ! -f "$1" ] || [[ ! "$1" ]]; then
      echo "'$1' is not a valid file"
      return
   fi
	timidity -Ow "$1"
}

#######################
## Setup github repo ##
#######################
function mkgit() {
   local GITHUB="Cloudef"

	mkdir "$1"
	cd "$1"
	git init
	touch README
	git add README
	git commit -m 'inital setup - automated'
	git remote add origin git@github.com:$GITHUB/$1.git
	git push origin master
}

###########################
## Change terminal title ##
##########################
function tname(){
	echo -ne "\033]0;${1:-$TERM}\007";
}


#####################
## Decode QR codes ##
#####################
qrdecode() {
   zbarimg -S\*.disable -Sqrcode.enable "$1" -q | sed '1s/^[^:]\+://';
}

############################
## BGM music with mplayer ##
############################
function bgmplayer(){
	mplayer "$1" -novideo &>/dev/null </dev/null &
}

####################################
## Getting undefined references?  ##
## Grep your libs for symbols     ##
####################################
function greplib(){
   if [[ ! "$1" ]]; then
      echo "Usage : greplib [symbol] (lookup path)"
      return
   fi

   if [[ ! "$2" ]]; then
      nm -a -o /usr/lib/*.so 2> /dev/null | grep $1
      nm -a -o /usr/lib/*.a  2> /dev/null | grep $1
   else
      nm -a -o $2/*.so 2> /dev/null | grep $1
      nm -a -o $2/*.a  2> /dev/null | grep $1
   fi
}

###########################################
## Switch to Japanese time using ntpdate ##
###########################################
japantime() {
	sudo cp /usr/share/zoneinfo/Japan /etc/localtime
	sudo ntpdate pool.ntp.org
}

##########################################
## Switch to Finnish time using ntpdate ##
##########################################
finlandtime() {
	sudo cp /usr/share/zoneinfo/Europe/Helsinki /etc/localtime
	sudo ntpdate pool.ntp.org
}

#####################################################
## Remux MKV to use only 1 audio && subtible track ##
#####################################################
remux() {
	if [[ ! "$1" ]] || [[ ! "$2" ]] || [[ ! "$3" ]] || [[ ! "$4" ]]; then
		echo "Usage : remux [output] [input] [audio track to keep] [subtible track to keep]"
		return
	fi
	mkvmerge -o "$1" -d 1 --audio-tracks "$3" --subtitle-tracks "$4" "$2"
}

#####################################################################
## Same as earlier, expect you can batch whole directory with this ##
#####################################################################
bremux() {
	FILTER="*.mkv"
	if [[ ! "$1" ]] || [[ ! "$2" ]]; then
		echo "Usage : bremux [audio track] [subtible track] [filter]"
		return
	fi
	if [[ "$3" ]]; then
		FILTER="$3"
	fi
	for i in $FILTER
	do
		remux "[REMUX]$i" "$i" "$1" "$2"
	done
}

############################################################
## Print MKV info, use this to find out the track numbers ##
############################################################
mkv() {
	if [[ ! "$1" ]]; then
		echo "Usage : mkv [file]"
		return
	fi
	mkvmerge -i "$@"
}

##################################
## Compress && Strip elf binary ##
##################################
elfcompress() {
   if [[ ! "$1" ]]; then
      echo "Usage : elfcompress [binary]"
      return
   fi

   cp "$1" /tmp/compress.temp
   strip -s -R .comment -R .gnu.version /tmp/compress.temp

   7z a -tGZip -mx=9 /tmp/compress.gz /tmp/compress.temp
   echo 'a=/tmp/I;tail -n+2 $0|zcat>$a;chmod +x $a;$a;rm $a;exit' >> /tmp/unpack.header

   cat /tmp/unpack.header /tmp/compress.gz > "$1.packed"
   chmod +x "$1.packed"

   rm /tmp/compress.temp
   rm /tmp/compress.gz
   rm /tmp/unpack.header
}

############################
## Screen capture to file ##
############################
function screencap() {
	local fd="${1-capture.mkv}"
   local WININFO="`xwininfo`"
	local INRESW=`echo "$WININFO" | grep 'Width:'                  | awk '{print $2;}'`
   local INRESH=`echo "$WININFO" | grep 'Height:'                 | awk '{print $2;}'`
   local INPOSX=`echo "$WININFO" | grep 'Absolute upper-left X:'  | awk '{print $4;}'`
   local INPOSY=`echo "$WININFO" | grep 'Absolute upper-left Y:'  | awk '{print $4;}'`

   local INRES="${INRESW}x${INRESH}"
   local INPOS="${INPOSX},${INPOSY}"

   local FPS="24"                      # Target FPS
   local PRESET="ultrafast"

   echo "---------$INRES+$INPOS------------"
   echo ""

   ffmpeg -f x11grab -s "$INRES" -r "$FPS" -i :0.0+$INPOS \
   -f alsa -async 1 -ac 2 -i hw:0,0 -vcodec libx264 -vsync 1 -vpre $PRESET -sameq \
   -acodec pcm_s16le -threads 0  "$fd"
}

##############################
## Encode GLC captured file ##
##############################
glc-encode() {
   if [[ ! "$1" ]] || [[ ! "$2" ]] || [[ ! "$3" ]] || [[ ! "$4" ]]; then
      echo "Usage : glc-encode [input] [audio bitrate] [video bitrate] [output]"
      return
   fi

   if [[ "$2" != "0" ]]; then
      glc-play "$1" -o - -a 1 | ffmpeg -i pipe: -ab $2 /tmp/audio.mp4
   fi
   if [ -f /tmp/audio.mp4 ]; then
      glc-play "$1" -o - -y 1 | ffmpeg -i pipe: -i /tmp/audio.mp4 -acodec copy -b $3 "$4"
      rm /tmp/audio.mp4
   else
      glc-play "$1" -o - -y 1 | ffmpeg -i pipe: -b $3 "$4"
   fi
}

##################################################
## Stream to JustinTV                           ##
## Create $HOME/.streamkey with your stream key ##
## or export STREAM_KEY variable                ##
##################################################
source ${HOME}/.streamkey
streamjustin() {
   local WININFO="`xwininfo`"
	local INRESW=`echo "$WININFO" | grep 'Width:'                  | awk '{print $2;}'`
   local INRESH=`echo "$WININFO" | grep 'Height:'                 | awk '{print $2;}'`
   local INPOSX=`echo "$WININFO" | grep 'Absolute upper-left X:'  | awk '{print $4;}'`
   local INPOSY=`echo "$WININFO" | grep 'Absolute upper-left Y:'  | awk '{print $4;}'`

   local INRES="${INRESW}x${INRESH}"
   local INPOS="${INPOSX},${INPOSY}"

   local OUTRES=${1-480x320}           # You can pass argument
   local FPS="24"                      # Target FPS
   local PRESET="ultrafast"

   echo "---------$INRES+$INPOS------------"
   echo ""

   ffmpeg -f x11grab -s "$INRES" -r "$FPS" -i :0.0+$INPOS \
   -f alsa -ac 2 -async 1 -i hw:0,0 -vcodec libx264 -vsync 1 -sameq -vpre $PRESET -s "$OUTRES" \
   -acodec libmp3lame -ar 44100 -ab 128k -threads 0  \
   -f flv "rtmp://live.justin.tv/app/$STREAM_KEY"
}

########################
## Print window class ##
########################
xclass()
{
   xprop |awk '
       /^WM_CLASS/{sub(/.* =/, "instance:"); sub(/,/, "\nclass:"); print}
       /^WM_NAME/{sub(/.* =/, "title:"); print}'
}

###################################################################
## Valgrind wrapper, use valgrind.supp for suppressions if found ##
###################################################################
memleak()
{
   if [ -f valgrind.supp ]
   then
      valgrind --suppressions=valgrind.supp $@
   else
      valgrind $@
   fi
}

##################################################
## Convert ISO to splitted WBFS to use with Wii ##
##################################################
wiisplit()
{
   if [[ ! "$1" ]]; then
      echo "Usage: wiisplit [ISO file]"
      return
   fi
   if [[ ! -f "$1" ]]; then
      echo "'$1' is not a valid file"
      return
   fi

   wbfs_file "$1"
}

ANIME_WATCHED="/media/Anime/Katsotut"
ANIME_WATCHING="/media/Anime/Watching"
ANIME_SEED="/media/Anime/Seed"
################
## Play Anime ##
################
anime()
{
   if [[ ! "$1" ]] || [[ ! "$2" ]]; then
      echo "Usage:"
      echo "anime   [title] [episode] - Watch"
      echo "animec  [title]           - Check"
      echo "mvanime [title] [title]   - Move"
      echo "mkanime [title]           - New"
      echo "rsanime [title]           - Store"
      return
   fi

   local MATCH=`find "$ANIME_WATCHING" -type f -iname "*$1*$2*\[*\].*" -print -quit`
   if [[ ! "$MATCH" ]]; then
      MATCH=`find "$ANIME_WATCHED" -type f -iname "*$1*$2*\[*\].*" -print -quit`
   fi
   if [[ ! "$MATCH" ]]; then
      MATCH=`find "$ANIME_WATCHING" -type f -iname "*$1*$2*.*" -print -quit`
   fi
   if [[ ! "$MATCH" ]]; then
      MATCH=`find "$ANIME_WATCHED" -type f -iname "*$1*$2*.*" -print -quit`
   fi
   if [[ ! "$MATCH" ]]; then
      echo "No match.."
      return
   fi

   echo "playing: $MATCH"
   mplayer-icon "$MATCH" &> /dev/null
}

################
## List Anime ##
################
animec()
{
   if [[ ! "$1" ]]; then
      echo "Usage: animec [title]"
      return
   fi

   echo "Watching:"
   find "$ANIME_WATCHING" -iname "*$1*.*" -exec basename {} \;
   echo ""

   echo "Watched:"
   find "$ANIME_WATCHED" -iname "*$1*.*"  -exec basename {} \;
}

#############################
## MV Anime to right place ##
#############################
mvanime()
{
   if [[ ! "$1" ]] || [[ ! "$2" ]]; then
      echo "Usage: mvanime [title] [title]"
      return
   fi

   # prefer files first
   local MATCH=`find "$ANIME_WATCHING" -iname "*$2*.*" -print -quit`
   if [[ ! "$MATCH" ]]; then
      MATCH=`find "$ANIME_WATCHED" -iname "*$2*.*" -print -quit`
   fi
   # try without ext
   if [[ ! "$MATCH" ]]; then
      MATCH=`find "$ANIME_WATCHING" -iname "*$2*" -print -quit`
   fi
   if [[ ! "$MATCH" ]]; then
      MATCH=`find "$ANIME_WATCHED" -iname "*$2*" -print -quit`
   fi
   if [[ ! "$MATCH" ]]; then
      echo "destination not found, check with animec"
      return
   fi

   if [ -f "$MATCH" ]; then
      MATCH=`dirname "$MATCH"`
   fi
   find "$ANIME_SEED" -maxdepth 1 -type f -iname "*$1*.*" -print0 | xargs -0 -r mv -v --target-directory="$MATCH"
}

################################
## Create new watching folder ##
################################
mkanime()
{
   if [[ ! "$1" ]]; then
      echo "Usage: mkanime [title]"
      return
   fi

   mkdir "$ANIME_WATCHING/$1"
   echo "mk : $ANIME_WATCHING/$1"
}

############################
## Store anime in watched ##
############################
rsanime()
{
   if [[ ! "$1" ]]; then
      echo "Usage: rsanime [title]"
      return
   fi

   find "$ANIME_WATCHING" -maxdepth 1 -type d -iname "*$1*" -print0 | xargs -0 -r mv -v --target-directory="$ANIME_WATCHED"
}
