#!/bin/bash
## INCLUDE FILE ##

# Useful shell functions
# Most of these aren't done by me, but collected from different places.

##############################################
## Colored Find                             ##
## NOTE: Searches current tree recrusively. ##
##############################################
f() {
    find . -iregex ".*$@.*" -printf '%P\0' | xargs -r0 ls --color=auto -1d
}

################
## Smarter CD ##
################
function goto() {
   [ -d "$1" ] && cd "$1" || cd "$(dirname "$1")";
}

####################
## Copy && Follow ##
####################
function cpf() {
   cp "$@" && goto "$_";
}

####################
## Move && Follow ##
####################
function mvf() {
   mv "$@" && goto "$_";
}

#####################
## mkdir && follow ##
#####################
function mkcdr() {
   mkdir -vp "$@" && cd "$_";
}

##########################
## VDPAU Test           ##
## CPU is better for me ##
##########################
function vplay() {
   mplayer -vo vdpau -vc ffh264vdpau "$1"
}

##################
## Start daemon ##
##################
function start() {
   sudo rc.d start $@
#   for arg in $@
#   do
#      sudo /etc/rc.d/$arg start
#   done
}

#################
## Stop daemon ##
#################
function stop() {
   sudo rc.d stop $@
#   for arg in $@
#   do
#      sudo /etc/rc.d/$arg stop
#   done
}

####################
## Restart daemon ##
####################
function restart() {
   sudo rc.d stop  $@
   sudo rc.d start $@
#   for arg in $@
#   do
#      sudo /etc/rc.d/$arg restart
#   done
}

###################
## Daemon status ##
###################
function status() {
   rc.d list $@
#   for arg in $@
#   do
#      sudo /etc/rc.d/$arg status
#   done
}

#####################
## Man page to PDF ##
#####################
man2pdf() {
   man -w "$@" &> /dev/null && man -t "$@" | ps2pdf - "$@.pdf" && echo "$@.pdf"
}

###################################################################
## PKG Build system                                              ##
##                                                               ##
## Create PKGBUILD folder in your $HOME                          ##
## For each project create own folder and put the PKGBUILD there ##
###################################################################
function pkg() {
   local nopop=0
   if [ ! "$1" ]; then
      echo "Usage : pkg [PKGBUILD]"
      return
   fi
   if [ ! -d "$HOME/PKGBUILD" ]; then
      echo "No PKGBUILD folder in Home"
      return
   fi
   if [ ! -d "$HOME/PKGBUILD/$1" ]; then
      echo "No PKG directory for $1"
      return
   fi
   if [ ! -f "$HOME/PKGBUILD/$1/PKGBUILD" ]; then
      echo "No PKGBUILD for $1"
      return
   fi
   [[ "$PWD" == "$HOME/PKGBUILD/$1" ]] && nopop=1
   [[ $nopop -eq 0 ]] && pushd "$HOME/PKGBUILD/$1" >> /dev/null
   if [ "$2" ]; then
      shift
      makepkg "$@"
   else
      makepkg --clean --install
   fi
   [[ $nopop -eq 0 ]] && popd >> /dev/null
}

###########################
## Quote from bashquotes ##
###########################
function quote() {
   curl -s "http://bash.org/?random1"|grep -oE "<p class=\"quote\">.*</p>.*</p>"|grep -oE "<p class=\"qt.*?</p>"|sed -e 's/<\/p>/\n/g' -e 's/<p class=\"qt\">//g' -e 's/<p class=\"qt\">//g'|perl -ne 'use HTML::Entities;print decode_entities($_),"\n"'|head -1
}

#################################
## CLIcandy from commandlinefu ##
#################################
function fu() {
   if [ ! "$1" ]; then
      echo "Usage: fu [query]"
      return
   fi
   local URL="$(echo "$@" | perl -MURI::Escape -ne 'chomp;print uri_escape($_)')"
   curl -s "http://www.commandlinefu.com/commands/matching/$URL/$(echo -n "$@" | openssl base64)/plaintext" | grep -v "^# commandlinefu"
}

######################
## Extract archives ##
######################
function extract() {
   # Allow work with wildcards
   while [ "$1" ]; do
      if [ -f "$1" ] ; then
         case "$1" in
            *.tar.bz2)   tar xvjf "$1"    ;;
            *.tar.gz)    tar xvzf "$1"    ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xvf "$1"     ;;
            *.tbz2)      tar xvjf "$1"    ;;
            *.tgz)       tar xvzf "$1"    ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "don't know how to extract '$1'..." ;;
         esac
      else
         echo "'$1' is not a valid file"
      fi
      shift || break
   done
}

########################
## Create tar archive ##
########################
function mktar() {
   tar cvf  "${1%%/}.tar" "${1%%/}/";
}

###########################
## Create tar.gz archive ##
###########################
function mktgz() {
   tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
}

############################
## Create tar.bz2 archive ##
############################
function mktbz() {
   tar cvjf "${1%%/}.tar.bz2" "${1%%/}/";
}

#################################################
## Simple encode for HD video                  ##
## If you are _encoder_ don't rely on these :) ##
#################################################
function videoencodehd()
{
   if [ ! -f "$1" ] || [ ! "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi
   ffmpeg -y -i $1 -threads 0 -acodec libvorbis -ar 44100 -ab 96k -vcodec libx264 -preset fast -level 41 -s 800x480 -crf 20 -bufsize 24000k -maxrate 32000k -g 250 -r 20 -coder 1 -flags +loop -cmp +chroma -partitions +parti4x4+partp8x8+partb8x8 -flags2 +dct8x8+bpyramid -me_method umh -subq 7 -me_range 16 -keyint_min 25 -sc_threshold 40 -i_qfactor 0.71 -rc_eq 'blurCplx^(1-qComp)' -bf 16 -b_strategy 1 -bidir_refine 1 -refs 6 -deblockalpha 0 -deblockbeta 0 $2
}

################################
## Simple encode for SD video ##
################################
function videoencodesd()
{
   if [ ! -f "$1" ] || [ ! "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi
   ffmpeg -i "$1" -vcodec libx264 -preset fast -crf 22 -threads 0 $2
}

################
## VID >> OGV ##
################
function vid2ogv() {
    if [ ! -f "$1" ] || [ ! "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi
   ffmpeg -i "$1" -vcodec libtheora -sameq -acodec libvorbis ${1%.*}.ogv
}

################
## FLV >> MKV ##
################
function flv2mkv() {
   if [ ! -f "$1" ] || [ ! "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi
   ffmpeg -i "$1" -vcodec copy -sameq -acodec copy -f matroska ${1%.*}.mkv
}

################
## FLV >> MP3 ##
################
function flv2mp3() {
   if [ ! -f "$1" ] || [ ! "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi
   ffmpeg -i "$1" -ab 320 -ar 44100 ${1%.*}.mp3
}

################
## MID >> OGG ##
################
function mid2ogg()
{
   if [ ! -f "$1" ] || [ ! "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi
   timidity -Ov "$1"
}

################
## MID >> WAV ##
################
function mid2wav()
{
   if [ ! -f "$1" ] || [ ! "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi
   timidity -Ow "$1"
}

#######################
## Setup github repo ##
#######################
function mkgit() {
   local GITHUB="Cloudef"

   mkdir "$1"
   cd "$1"
   git init
   touch README
   git add README
   git commit -a -m 'inital setup - automated'
   git remote add origin "git@github.com:$GITHUB/$1.git"
   git push -u origin master
}

#####################
## Decode QR codes ##
#####################
qrdecode() {
   zbarimg -S\*.disable -Sqrcode.enable "$1" -q | sed '1s/^[^:]\+://';
}

############################
## BGM music with mplayer ##
############################
function bgmplayer() {
   mplayer "$1" -novideo &>/dev/null </dev/null &
}

####################################
## Getting undefined references?  ##
## Grep your libs for symbols     ##
####################################
function greplib() {
   if [ ! "$1" ]; then
      echo "Usage : greplib [symbol] (lookup path)"
      return
   fi

   if [ ! "$2" ]; then
      nm -a -o /usr/lib/*.so 2> /dev/null | grep $1
      nm -a -o /usr/lib/*.a  2> /dev/null | grep $1
   else
      nm -a -o $2/*.so 2> /dev/null | grep $1
      nm -a -o $2/*.a  2> /dev/null | grep $1
   fi
}

###########################################
## Switch to Japanese time using ntpdate ##
###########################################
japantime() {
   sudo cp /usr/share/zoneinfo/Japan /etc/localtime
   sudo ntpdate pool.ntp.org
}

##########################################
## Switch to Finnish time using ntpdate ##
##########################################
finlandtime() {
   sudo cp /usr/share/zoneinfo/Europe/Helsinki /etc/localtime
   sudo ntpdate pool.ntp.org
}

#####################################################
## Remux MKV to use only 1 audio && subtible track ##
#####################################################
remux() {
   if [ ! "$1" ] || [ ! "$2" ] || [ ! "$3" ] || [ ! "$4" ]; then
      echo "Usage : remux [output] [input] [audio track to keep] [subtible track to keep]"
      return
   fi
   mkvmerge -o "$1" -d 1 --audio-tracks "$3" --subtitle-tracks "$4" "$2"
}

#####################################################################
## Same as earlier, expect you can batch whole directory with this ##
#####################################################################
bremux() {
   local FILTER="*.mkv"
   if [ ! "$1" ] || [ ! "$2" ]; then
      echo "Usage : bremux [audio track] [subtible track] [filter]"
      return
   fi
   [ "$3" ] && FILTER="$3"
   for i in $FILTER
   do
      remux "[REMUX]$i" "$i" "$1" "$2"
   done
}

############################################################
## Print MKV info, use this to find out the track numbers ##
############################################################
mkv() {
   if [ ! "$1" ]; then
      echo "Usage : mkv [file]"
      return
   fi
   mkvmerge -i "$@"
}

##################################
## Compress && Strip elf binary ##
##################################
elfcompress() {
   if [ ! "$1" ]; then
      echo "Usage : elfcompress [binary]"
      return
   fi

   cp "$1" /tmp/compress.temp
   strip -s -R .comment -R .gnu.version /tmp/compress.temp

   7z a -tGZip -mx=9 /tmp/compress.gz /tmp/compress.temp
   echo 'a=/tmp/I;tail -n+2 $0|zcat>$a;chmod +x $a;$a;rm $a;exit' >> /tmp/unpack.header

   cat /tmp/unpack.header /tmp/compress.gz > "$1.packed"
   chmod +x "$1.packed"

   rm /tmp/compress.temp
   rm /tmp/compress.gz
   rm /tmp/unpack.header
}

############################
## Screen capture to file ##
############################
function screencap() {
   local WININFO="$(xwininfo)"
   local INRESW="$(echo "$WININFO" | grep 'Width:'                  | awk '{print $2;}')"
   local INRESH="$(echo "$WININFO" | grep 'Height:'                 | awk '{print $2;}')"
   local INPOSX="$(echo "$WININFO" | grep 'Absolute upper-left X:'  | awk '{print $4;}')"
   local INPOSY="$(echo "$WININFO" | grep 'Absolute upper-left Y:'  | awk '{print $4;}')"

   local INRES="${INRESW}x${INRESH}"
   local INPOS="${INPOSX},${INPOSY}"

   local FPS="24"                      # Target FPS
   local PRESET="ultrafast"

   echo "---------$INRES+$INPOS------------"
   echo ""

   ffmpeg -f x11grab -s "$INRES" -vf scale=${INRESW}:-1 -r "$FPS" -i :0.0+$INPOS \
          -f alsa -i hw:0,0 -acodec pcm_s16le -async 1 -ar 44100 -ab 96k \
          -vcodec libx264 -vpre "$PRESET" -crf 25 \
          -threads 4 $@
}

#########################################
## Screen capture to file              ##
## Uses huffyuv codec which is low CPU ##
## However watch out for disk space!   ##
#########################################
function screencaplow() {
   local WININFO="$(xwininfo)"
   local INRESW="$(echo "$WININFO" | grep 'Width:'                  | awk '{print $2;}')"
   local INRESH="$(echo "$WININFO" | grep 'Height:'                 | awk '{print $2;}')"
   local INPOSX="$(echo "$WININFO" | grep 'Absolute upper-left X:'  | awk '{print $4;}')"
   local INPOSY="$(echo "$WININFO" | grep 'Absolute upper-left Y:'  | awk '{print $4;}')"

   local INRES="${INRESW}x${INRESH}"
   local INPOS="${INPOSX},${INPOSY}"

   local FPS="24"                      # Target FPS
   local PRESET="ultrafast"

   echo "---------$INRES+$INPOS------------"
   echo ""

   ffmpeg -f x11grab -s "$INRES" -vf scale=${INRESW}:-1 -r "$FPS" -i :0.0+$INPOS \
          -f alsa -i hw:0,0 -acodec pcm_s16le -async 1 -ar 44100 -ab 128k \
          -vcodec huffyuv \
          -threads 4 $@
}


##############################
## Encode GLC captured file ##
##############################
glc-encode() {
   if [ ! "$1" ] || [ ! "$2" ] || [ ! "$3" ] || [ ! "$4" ]; then
      echo "Usage : glc-encode [input] [audio bitrate] [video bitrate] [output]"
      return
   fi

   [[ "$2" == "0" ]] || glc-play "$1" -o - -a 1 | ffmpeg -i pipe: -ab $2 /tmp/audio.mp4
   if [ -f /tmp/audio.mp4 ]; then
      glc-play "$1" -o - -y 1 | ffmpeg -i pipe: -i /tmp/audio.mp4 -acodec copy -b $3 "$4"
      rm /tmp/audio.mp4
   else
      glc-play "$1" -o - -y 1 | ffmpeg -i pipe: -b $3 "$4"
   fi
}

################################
## Stream to JustinTV         ##
## export STREAM_KEY variable ##
################################
source "${HOME}/passwd/streamkey"
streamjustin() {
   local WININFO="$(xwininfo)"
   local INRESW="$(echo "$WININFO" | grep 'Width:'                  | awk '{print $2;}')"
   local INRESH="$(echo "$WININFO" | grep 'Height:'                 | awk '{print $2;}')"
   local INPOSX="$(echo "$WININFO" | grep 'Absolute upper-left X:'  | awk '{print $4;}')"
   local INPOSY="$(echo "$WININFO" | grep 'Absolute upper-left Y:'  | awk '{print $4;}')"

   local INRES="${INRESW}x${INRESH}"
   local INPOS="${INPOSX},${INPOSY}"

   local OUTRES=${1-480x320}           # You can pass argument
   local FPS="15"                      # Target FPS
   local PRESET="ultrafast"

   echo "---------$INRES+$INPOS------------"
   echo ""

   ffmpeg -f x11grab -s "$INRES" -r "$FPS" -i :0.0+$INPOS \
   -f alsa -i hw:0,0 -acodec libmp3lame -async 1 -ar 44100 -ab 96k \
   -vcodec libx264 -vpre "$PRESET" -crf 25 \
   -threads 4 -f flv "rtmp://live.justin.tv/app/$STREAM_KEY"
}

########################
## Print window class ##
########################
xclass()
{
   xprop |awk '
   /^WM_CLASS/{sub(/.* =/, "instance:"); sub(/,/, "\nclass:"); print}
   /^WM_NAME/{sub(/.* =/, "title:"); print}'
}

###################################################################
## Valgrind wrapper, use valgrind.supp for suppressions if found ##
###################################################################
memleak()
{
   if [ -f valgrind.supp ]
   then
      valgrind --suppressions=valgrind.supp "$@"
   else
      valgrind "$@"
   fi
}

##################################################
## Convert ISO to splitted WBFS to use with Wii ##
##################################################
wiisplit()
{
   if [ ! "$1" ]; then
      echo "Usage: wiisplit [ISO file]"
      return
   fi
   if [ ! -f "$1" ]; then
      echo "'$1' is not a valid file"
      return
   fi

   wbfs_file "$1"
}

ANIME_BASE="/media/Anime"
ANIME_WATCHED="$ANIME_BASE/Katsotut"
ANIME_WATCHING="$ANIME_BASE/Watching"
ANIME_SEED="$ANIME_BASE/Seed"
################
## Play Anime ##
################
anime()
{
   if [[ "$@" == "--help" ]] || [[ "$@" == "-h" ]]; then
      echo "Usage:"
      echo "anime   [title]           - Watch"
      echo "mvanime                   - Move"
      echo "rsanime                   - Store"
      echo "mkanime [title]           - New"
      return
   fi

   local to_history=1
   local name="$(echo "$@" | sed 's/ /*/g')"
   local match="$(find $ANIME_WATCHING $ANIME_WATCHED -type f -iname "*$name*" | grep -v ".ass" | grep -v ".srt")"
   [[ $(echo "$match" | wc -l) -gt 1 ]] && match="$(echo "$match" | dmenu -i -l 20 -p "anime")" || to_history=0
   [[ -f "$match" ]] || return

   # add the animu to history, so you can ctrl+r later and
   # track which episode you are going in.
   #
   # NOTE: $CURRENT_SHELL is my own variable
   if [[ $to_history -eq 1 ]]; then
      [[ $CURRENT_SHELL == "zsh"  ]] && print   -s "anime \'$(basename $match)\'"
      [[ $CURRENT_SHELL == "bash" ]] && history -s "anime \'$(basename $match)\'"
   fi
   echo "playing: $(basename "$match")"
   mplayer -really-quiet "$match" &> /dev/null
}

#############################
## MV Anime to right place ##
#############################
mvanime()
{
   local from="$(find $ANIME_SEED -maxdepth 1 -mindepth 1 -type f | grep -v ".ass" | grep -v ".srt" | dmenu -i -l 20 -p "mvanime")"
   [[ -f "$from" ]] || return

   local to="$(find $ANIME_WATCHING $ANIME_WATCHED -maxdepth 1 -mindepth 1 -type d | dmenu -i -l 20 -p "to")"
   [[ -d "$to" ]] || return

   # move
   mv -v "$from" "$to"
}

############################
## Store anime in watched ##
############################
rsanime()
{
   local match="$(find $ANIME_WATCHING -maxdepth 1 -mindepth 1 -type d | dmenu -i -l 20 -p "rsanime")"
   [[ -d "$match" ]] || return

   # store
   mv -v "$match" "$ANIME_WATCHED/$(basename "$match")"
}

################################
## Create new watching folder ##
################################
mkanime()
{
   if [ ! "$1" ]; then
      echo "Usage: mkanime [title]"
      return
   fi

   mkdir "$ANIME_WATCHING/$1"
   echo "mk : $ANIME_WATCHING/$1"
}

###############################################
## Which type of Japanese character is this? ##
###############################################
jchr()
{
   local char=$(printf "%d" \'$@)
   [ $char -gt 19967 ] && [ $char -lt 40896 ] && echo "$@ is kanji"     && return
   [ $char -gt 12351 ] && [ $char -lt 12448 ] && echo "$@ is hiragana"  && return
   [ $char -gt 12447 ] && [ $char -lt 12544 ] && echo "$@ is katakana"  && return
   echo "$@ is wtf!?"
}

###############################
## Detect language of string ##
###############################
detectlanguage() {
   local URL="$(echo "$@" | perl -MURI::Escape -ne 'chomp;print uri_escape($_)')"
   curl -s -A "Mozilla" "http://ws.detectlanguage.com/0.2/detect?q=$URL&key=$(cat "$HOME/passwd/langdetect")" \
                        | sed 's/.*\[{.*"language":"\(.*\)"},.*/\1\n/'
}

#############################
## Japanese text to speech ##
#############################
say() {
   local URL="$(echo "$@" | perl -MURI::Escape -ne 'chomp;print uri_escape($_)')"
   mplayer -really-quiet "http://translate.google.com/translate_tts?ie=UTF-8&tl=JA&q=$URL" &> /dev/null
}

######################################
## Crappy google translate [JA->EN] ##
######################################
translate() {
   local URL="$(echo "$@" | perl -MURI::Escape -ne 'chomp;print uri_escape($_)')"
   curl -s -A "Mozilla" "http://translate.google.com/translate_a/t?client=t&ie=UTF-8&text=$URL&sl=ja&tl=en" | awk -F'"' '{print $2}'
}

###########################
##    JA -> ROMAJI       ##
## Needs KAKASI && ICONV ##
###########################
romaji() { echo "$@" | iconv -f utf8 -t eucjp | kakasi -i euc -w | kakasi -i euc -Ha -Ka -Ja -Ea -ka }

###########################
##    JA -> READING      ##
## Needs KAKASI && ICONV ##
###########################
reading() {
   # Additional echo to "trim" newlines without tr
   echo $(echo "$@" | mecab | awk -F',' '{print $8}' | iconv -f utf8 -t eucjp | kakasi -i euc -KH | iconv -f eucjp -t utf8)
}

################
## Calculator ##
################
calc() {
   local result="$(xsel -o | dmenu -p Calculate: | xargs echo | bc 2>&1)"
   echo "$result" | xsel -i; echo "$result"
}
